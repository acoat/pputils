#
#+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!
#                                                                       #
#                                 append.py                           # 
#                                                                       #
#+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!+!
#
# Author: Pat Prodanovic, Ph.D., P.Eng.
# 
# Date: July 27, 2015
#
# Purpose: Script takes two *.slf files that have the same mesh, and 
# appends friction variable to the original file. This programs assumes 
# that both *.slf files have only one variable, and only one time record
# (which is the case if they were created with pputils).
#
# Uses: Python2.7.9, Matplotlib v1.4.2, Numpy v1.8.2
#
# Example:
#
# python append.py -i bathy.slf friction.slf -o merged.slf
# where:
# -i input *.slf files
# -o output *.slf file with merged variables 
# 
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Global Imports
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
import os,sys                              # system parameters
import matplotlib.tri    as mtri           # matplotlib triangulations
import numpy             as np             # numpy
import math                                # for the ceil function
from parsers.parserSELAFIN import SELAFIN 
curdir = os.getcwd()
#
#
# I/O
if len(sys.argv) != 6 :
	print 'Wrong number of Arguments, stopping now...'
	print 'Usage:'
	print 'python append.py -i bathy.slf friction.slf -o merged.slf'
	sys.exit()
dummy1 =  sys.argv[1]
first_file = sys.argv[2]
second_file = sys.argv[3]
dummy2 =  sys.argv[4]
output_file = sys.argv[5]

# reads the first and second SELAFIN files
first = SELAFIN(first_file)
second = SELAFIN(second_file)

if (first.NPOIN2 != second.NPOIN2) or (first.NELEM2 != second.NELEM2):
	print 'Nodes and elements of two input files do not match ... exiting.'
	sys.exit()

# this is the output file (i.e., the one that is merged)
# now to write the SELAFIN mesh file
out = SELAFIN('')

#print '     +> Set SELAFIN variables'
out.TITLE = 'Created with pputils'
out.NBV1 = 2
out.NVAR = 2
out.VARINDEX = range(out.NVAR)
out.VARNAMES.append('BOTTOM          ')
out.VARUNITS.append('M               ')
out.VARNAMES.append('BOTTOM FRICTION ')
out.VARUNITS.append('                ')

#print '     +> Set SELAFIN sizes'
out.NPLAN = first.NPLAN
out.NDP2 = first.NDP2
out.NDP3 = first.NDP3
out.NPOIN2 = first.NPOIN2
out.NPOIN3 = first.NPOIN3
out.NELEM2 = first.NELEM2
out.NELEM3 = first.NELEM2
out.IPARAM = first.IPARAM

#print '     +> Set SELAFIN mesh'
out.MESHX = first.MESHX
out.MESHY = first.MESHY

#print '     +> Set SELAFIN IPOBO'
out.IPOB2 = first.IPOB2
out.IPOB3 = first.IPOB3

#print '     +> Set SELAFIN IKLE'
out.IKLE2 = first.IKLE2
out.IKLE3 = first.IKLE3

#print '     +> Set SELAFIN times and cores'
# these two lists are empty after constructor is instantiated
out.tags['cores'].append(0)
out.tags['times'].append(0)

#out.tags = { 'times':[0] } # time (sec)
#out.DATETIME = sel.DATETIME
out.DATETIME = [2015, 1, 1, 1, 1, 1]
#out.tags = { 'cores':[long(0)] } # time frame 

#print '     +> Write SELAFIN headers'
out.fole.update({ 'hook': open(output_file,'w') })
out.fole.update({ 'name': 'Created with pputils' })
out.fole.update({ 'endian': ">" })     # big endian
out.fole.update({ 'float': ('f',4) })  # single precision

out.appendHeaderSLF()
out.appendCoreTimeSLF(0) 

# gets the values at time index zero for all variables
# but, in the file generated by stbtel, there will be only one variable
bathy = first.getVALUES(0)
z = np.zeros(first.NPOIN2)
z = bathy[0,:]

friction = second.getVALUES(0)
f = np.zeros(second.NPOIN2)
f = friction[0,:]

out.appendCoreVarsSLF([z,f])


